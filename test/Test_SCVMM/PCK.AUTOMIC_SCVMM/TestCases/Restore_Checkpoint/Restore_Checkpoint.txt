*** Settings ***
Suite Setup       Startup
Suite Teardown    Teardown
Force Tags        restore_checkpoint
Default Tags
Test Template     Restore Checkpoint Template
Library           com.automic.robot.itpa.ItpaLibrary
Library           String
Library           DateTime
Resource          ../../Resources/messages.txt
Resource          ../../Resources/keywords.txt
Resource          ../../Resources/variables.txt
Resource          ../../Resources/actions.txt

*** Test Cases ***    OK_NOK    VMName            VMHost        NthCheckpoint        CheckpointName        AdvancedOptions
Restore checkpoint With Valid Inputs Without Providing VM Host,CheckpointName and Advanced Options,Given There Exists N+1 Checkpoints For VM To Restore To Nth Checkpoint
                      [Tags]    main_scenarios
                      OK        ${Source_VM}      ${EMPTY}      ${Nth_Checkpoint}    ${EMPTY}              ${EMPTY}

Restore checkpoint With Valid Inputs With Providing VM Host,CheckpointName and Advanced Options,Given There Exists N+1 Checkpoints For VM To Restore To Nth Checkpoint
                      [Tags]    main_scenarios
                      OK        ${Source_VM}      ${VM_Host}    ${Nth_Checkpoint}    ${Checkpoint_Name}    -RunAsynchronously

Assert Behaviour when more than one VM exists for provided VM Name
                      [Tags]    main_scenarios
                      NOK       VM*               ${EMPTY}      ${Nth_Checkpoint}    ${EMPTY}              ${EMPTY}

Assertion With Non-Existing VM Name
                      NOK       Invalid           ${VM_Host}    ${Nth_Checkpoint}    ${EMPTY}              ${EMPTY}

Assertion With Non-Existing VM Host
                      NOK       ${Source_VM}      Invalid       ${Nth_Checkpoint}    ${EMPTY}              ${EMPTY}

Assertion With Non-Existing NthLatestCheckpoint
                      NOK       ${Source_VM}      ${VM_Host}    999                  ${EMPTY}              ${EMPTY}

Assertion With Non-Existing CheckpointName
                      NOK       ${Source_VM}      ${VM_Host}    ${Nth_Checkpoint}    Invalid               ${EMPTY}

Assertion for Non-Existing Advanced Parameter
                      NOK       ${Source_VM}      ${VM_Host}    ${Nth_Checkpoint}    ${EMPTY}              Invalid

Assertion for VM Name as Mandatory Field
                      NOK       ${EMPTY}          ${VM_Host}    ${Nth_Checkpoint}    ${Checkpoint_Name}    -RunAsynchronously

*** Keywords ***
Startup
    Log    *******Start Test "Restore Checkpoint"*******
    Log    *******Connect to AE*******
    Connect AE

Restore Checkpoint Template
    [Arguments]    ${OK_NOK}    ${VMName}    ${VMHost}    ${NthCheckpoint}    ${CheckpointName}    ${AdvancedOptions}
    [Documentation]    This test is used to remove the given VM.
    ...    -Precondition: To run this test suite, SCVMM credentials should be known to user and VM state should be in stopped or save state.
    ...    -${OK_NOK}: Boolean value indicate if the action is ENDED_OK or ENDED_NOT_OK/FAULT_OTHER. Value of this variable should be OK or NOK.
    ...    -${VMName}: This field specifies Name of the Virtual Machine you want to remove.
    ...    -${VMHost}: This field Specify Name of the VM Host in which VM is located.
    ...    -${NthCheckpoint}:Specify Nth checkpoint from the latest to store. 0 means most recent. Eg. 2 restores second-from-last created checkpoint.
    ...    -${CheckpointName}:Provide description for this checkpoint
    ...    -${AdvancedOptions}: This field specifies advanced parameter for remove virtual machine command.
    Generate String
    Action Create    ${_RESTORE_CHECKPOINT_ACTION}
    Common Inputs
    Run Keyword If    '${VMName}' == 'Invalid'    Action Set    &UC4RB_VMM_VMNAME#    ${Generated_Name}_${Time}    ELSE    Action Set
    ...    &UC4RB_VMM_VMNAME#    ${VMName}
    Run Keyword If    '${VMHost}' == 'Invalid'    Action Set    &UC4RB_VMM_VMHOST#    ${Generated_Name}_${Time}    ELSE    Action Set
    ...    &UC4RB_VMM_VMHOST#    ${VMHost}
    Run Keyword If    '${NthCheckpoint}' == 'Invalid'    Action Set    &UC4RB_VMM_NTH_CHECKPOINT#    ${Generated_Name}_${Time}    ELSE    Action Set
    ...    &UC4RB_VMM_NTH_CHECKPOINT#    ${NthCheckpoint}
    Run Keyword If    '${CheckpointName}' == 'Invalid'    Action Set    &UC4RB_VMM_CHECKPOINT#    ${Generated_Name}_${Time}    ELSE    Action Set
    ...    &UC4RB_VMM_CHECKPOINT#    ${CheckpointName}
    Run Keyword If    '${AdvancedOptions}' == 'Invalid'    Action Set    &UC4RB_VMM_ADV_OPTIONS#    ${Generated_Name}_${Time}    ELSE    Action Set
    ...    &UC4RB_VMM_ADV_OPTIONS#    ${AdvancedOptions}
    Set Overwrite Agent
    Action Execute
    Run Keyword If    '${OK_NOK}' == 'OK'    Assert Success    ELSE IF    '${OK_NOK}' == 'NOK'    Assert Failure

Teardown
    Log    *******End Test "Restore Checkpoint"*******
